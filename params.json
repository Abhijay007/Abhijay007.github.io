{
  "name": "The Update Framework (TUF)",
  "tagline": "Like the S in HTTPS, a plug-and-play library for securing a software updater",
  "body": "![Banner](https://raw.githubusercontent.com/theupdateframework/tuf/develop/docs/images/banner_website.JPG)\r\n\r\n# A Framework for Securing Software Update Systems\r\n\r\nThe Update Framework (TUF) helps developers to secure new or existing software update systems, which are often found to be vulnerable to many known attacks. TUF addresses this widespread problem by providing a comprehensive, flexible security framework that developers can integrate with any software update system. The framework can be easily integrated (or implemented in the native programming languages of these update systems) due to its concise, self-contained architecture and specification.  Developers have so far implemented the framework in the [Python](https://github.com/theupdateframework/tuf), [Go](https://github.com/flynn/go-tuf), [Ruby](https://corner.squareup.com/2013/12/securing-rubygems-with-tuf-part-1.html), and [Haskell](https://www.well-typed.com/blog/2015/07/hackage-security-alpha/) programming languages.\r\n\r\n## What is a software update system?\r\n\r\nGenerally, a software update system is an application (or part of an application) running on a client system that obtains and installs software. This can include updates to software that is already installed or even completely new software.\r\n\r\nThree major classes of software update systems are:\r\n\r\n* **Application updaters** which are used by applications use to update themselves. For example, Firefox updates itself through its own application updater.\r\n* **Library package managers** such as those offered by many programming languages for installing additional libraries. These are systems such as Python's pip/easy_install + PyPI, Perl's CPAN, Ruby's Gems, and PHP's PEAR.\r\n* **System package managers** used by operating systems to update and install all of the software on a client system. Debian's APT, Red Hat's YUM, and openSUSE's YaST are examples of these.\r\n\r\n## Our approach\r\n\r\nThere are literally thousands of different software update systems in common use today. (In fact the average Windows user has about two dozen different software updaters on their machine!)\r\n\r\nWe built a [specification](https://github.com/theupdateframework/tuf/blob/develop/docs/tuf-spec.txt) and [library](https://github.com/theupdateframework/tuf) that can be universally (and in most cases transparently) used to secure software update systems.\r\n\r\n## News\r\n\r\n**September 22, 2016**\r\n\r\n>\r\nTUF now welcomes proposals to extend the specification! For more information, please see [TUF Augmentation Proposals (TAPs)](https://github.com/theupdateframework/taps).\r\n\r\n**August 24, 2016**\r\n\r\n>\r\nRiyaz Faizullabhoy from Docker gave a [talk](https://lcccna2016.sched.org/event/7JWU/when-the-going-gets-tough-get-tuf-going-riyaz-faizullabhoy-docker) on TUF and Notary at LinuxCon North America.  Slides of his talk are available here:\r\nhttps://events.linuxfoundation.org/events/linuxcon-north-america/program/slides\r\n \r\n**February 22, 2016**\r\n\r\n>\r\nDavid Lawrence and Ying Li from Docker are scheduled to present at PyCon 2016.  The title\r\nof their presentation is: [When the going gets tough, get TUF going](https://us.pycon.org/2016/schedule/presentation/2187/)\r\n\r\n**February 19, 2016**\r\n\r\n> \r\nThe Update Framework now has a logo to call its own.  Thanks is given to Maria Jose Barrera (https://twitter.com/joseemari) for creating the logo, and to Santiago Torres for making it happen.\r\n\r\n**February 18, 2016**\r\n\r\n> The camera-ready version of \"Diplomat: Using Delegations to Protect Community Repositories\" was recently submitted to [NSDI 2016](https://www.usenix.org/conference/nsdi16).  The paper is freely available here on our website.\r\n\r\n**August 12, 2015**\r\n\r\n> In TUF adoption news... the Docker team announced Docker Content Trust, which integrates TUF via [Notary](https://github.com/docker/notary).  Docker Content Trust will be available starting with Docker 1.8, and supports image signing and verification.  For more information on the Docker + TUF integration, please visit:\r\nhttps://blog.docker.com/2015/08/content-trust-docker-1-8/\r\n\r\n## How do I learn more?\r\n\r\nFor more information, look at the following:\r\n\r\n* [The Update Framework Specification](https://github.com/theupdateframework/tuf/blob/develop/docs/tuf-spec.txt)\r\n* [Source code](https://github.com/theupdateframework/tuf)\r\n* [TUF Augmentation Proposals (TAPS)](https://github.com/theupdateframework/taps)\r\n* [Mailing list](https://groups.google.com/forum/?fromgroups#%21forum/theupdateframework)\r\n\r\nPapers:\r\n\r\n* [Diplomat: Using Delegations to Protect Community Repositories](https://isis.poly.edu/~jcappos/papers/kuppusamy_nsdi_16.pdf)\r\n* [Survivable Key Compromise in Software Update Systems](https://isis.poly.edu/~jcappos/papers/samuel_tuf_ccs_2010.pdf)\r\n* [​A Look in the Mirror: Attacks on Package Managers](https://isis.poly.edu/~jcappos/papers/cappos_mirror_ccs_08.pdf)\r\n* [Package Management Security](https://isis.poly.edu/~jcappos/papers/cappos_pmsec_tr08-02.pdf)\r\n\r\n## Integrations\r\n\r\n**Docker Distribution**\r\n\r\n* [Docker Content Trust: Image Signing and Verification using The Update Framework (TUF)](https://blog.docker.com/2015/08/content-trust-docker-1-8/)\r\n\r\n**Flynn**\r\n\r\n* [Flynn integrates TUF to securely distribute its components](https://flynn.io/docs/development#the-update-framework-%28tuf%29)\r\n\r\n**LEAP Encryption Access Project**\r\n\r\n* [LEAP integrates TUF with Bitmask](https://leap.se/en/2014/darkest-night)\r\n\r\n**Notary**\r\n\r\n* [Notary aims to make the internet more secure by making it easy for people to publish and verify content](https://github.com/docker/notary)\r\n\r\n* [Notarized Git Tags](https://github.com/docker/global-hack-day-3/tree/master/docker-bdx)\r\n\r\n**dtuf**\r\n\r\n* [Docker registry bindings](https://github.com/davedoesdev/dtuf) for The Update Framework in Python. Uses [dxf](https://github.com/davedoesdev/dxf) to store TUF metadata and target files in a Docker registry.\r\n\r\n**Securing Python package management**\r\n\r\n* [PEP 458: Securing the Link from PyPI to the End User](https://github.com/theupdateframework/pep-on-pypi-with-tuf)\r\n* [PEP 480: Surviving a Compromise of PyPI](https://github.com/theupdateframework/pep-maximum-security-model)\r\n* [PyCon 2013 lightning talk](https://www.youtube.com/watch?v=2sx1lS6cT3g) [(​Slides)](https://docs.google.com/presentation/d/1FMptD5sMH41BTgS3-PN0-7j5Zqvs_zZZ3ntsD_4u-7w/edit?usp=sharing)\r\n* [PyCon US 2011 talk](https://pyvideo.org/video/412/pycon-2011--tuf--secure-software-updates-in-pytho)\r\n* [Test pip with TUF](https://github.com/theupdateframework/pip/wiki/pip-over-TUF)\r\n* [​Automation for creating, updating and destroying a TUF-secured PyPI mirror](https://github.com/theupdateframework/pypi.updateframework.com)\r\n* [​Source code of pip with TUF](https://github.com/theupdateframework/pip/tree/tuf-master)\r\n    * [Little is required to integrate pip with TUF](https://github.com/theupdateframework/pip/compare/pypa:master...tuf-master)\r\n\r\n**Securing Ruby package management**\r\n\r\n* [Developers from Square have demonstrated an initial implementation of TUF for RubyGems](https://groups.google.com/forum/#%21topic/rubygems-tuf/vCxUSX51bbo)\r\n* [Atlassian Dev Den Tech Talk Series: Securing Rubygems with TUF](https://www.youtube.com/watch?v=J0GkcToeDiM)\r\n* [Securing RubyGems with TUF, Part 1](https://corner.squareup.com/2013/12/securing-rubygems-with-tuf-part-1.html)\r\n* [Securing RubyGems with TUF, Part 2](https://corner.squareup.com/2013/12/securing-rubygems-with-tuf-part-2.html)\r\n* [Securing RubyGems with TUF, Part 3](https://corner.squareup.com/2013/12/securing-rubygems-with-tuf-part-3.html)\r\n\r\n**CoreOS App Container Specification**\r\n\r\n* [Evaluation of TUF in App Container specification](https://groups.google.com/forum/#!searchin/theupdateframework/app$20container/theupdateframework/kqUMGIWSTyI/yQeR78PzIukJ)\r\n\r\n**Hackage, Haskell's Central Package Archive**\r\n\r\n* [Improving Hackage security](https://www.well-typed.com/blog/2015/04/improving-hackage-security/)\r\n\r\n**Signing the OPAM Repository: TUF Meets Git**\r\n\r\n* [Proposal to secure the distribution of OCaml packages](https://opam.ocaml.org/blog/Signing-the-opam-repository/)\r\n\r\n**Other implementations**\r\n\r\n* [Go](https://github.com/flynn/go-tuf)\r\n\r\n## Press\r\n\r\n* [Secure Software Distribution in an Adversarial World - Duo Tech Talk](https://www.youtube.com/watch?v=OW8NPkSq-3k)\r\n* [Docker: With Content Trust, You Can Run Containers on Untrusted Networks](https://thenewstack.io/docker-content-trust-can-run-containers-untrusted-networks/)\r\n* [Notary demoed at the DockerCon 2015 keynote](https://www.ustream.tv/recorded/64499822#t=1h54m0s)\r\n* [LWN.net: Docker image \"verification\"](https://lwn.net/Articles/628343/)\r\n* [Poster at PyCon 2015](https://us.pycon.org/2015/schedule/presentation/438/)\r\n* [LWN.net: Protecting Python package downloads](https://lwn.net/Articles/629426/)\r\n* [The Linux Magazine: TUF Love](https://www.linux-magazine.com/Issues/2014/160/Security-Lessons-TUF)\r\n* [Docker Image Insecurity](https://titanous.com/posts/docker-insecurity)\r\n* [Hacker News: Incremental Plans to Improve Python Packaging](https://news.ycombinator.com/item?id=8780369)\r\n* [Promotional materials on TUF (The Update Framework) w/ Justin Cappos and Trishank Kuppusamy](https://vimeo.com/88774074)\r\n* [Slashdot: Package Managers As Achilles Heel](https://it.slashdot.org/story/08/07/10/227220/package-managers-as-achilles-heel)\r\n\r\n## Acknowledgements\r\n\r\nThis material is based upon work supported by the National Science Foundation under Grant No. CNS-1345049 and CNS-0959138.  Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}